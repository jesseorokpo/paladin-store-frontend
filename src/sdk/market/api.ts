/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BusinessCategory
 */
export interface BusinessCategory {
    /**
     * 
     * @type {number}
     * @memberof BusinessCategory
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BusinessCategory
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Colour
 */
export interface Colour {
    /**
     * 
     * @type {number}
     * @memberof Colour
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Colour
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Colour
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface ColourDto
 */
export interface ColourDto {
    /**
     * 
     * @type {string}
     * @memberof ColourDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ColourDto
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface Market
 */
export interface Market {
    /**
     * 
     * @type {number}
     * @memberof Market
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Market
     */
    'name'?: string;
    /**
     * 
     * @type {State}
     * @memberof Market
     */
    'state'?: State;
    /**
     * 
     * @type {string}
     * @memberof Market
     */
    'address'?: string;
    /**
     * 
     * @type {Set<Image>}
     * @memberof Market
     */
    'images'?: Set<Image>;
    /**
     * 
     * @type {string}
     * @memberof Market
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Market
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Market
     */
    'productCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Market
     */
    'shopCount'?: number;
}
/**
 * 
 * @export
 * @interface PageShop
 */
export interface PageShop {
    /**
     * 
     * @type {number}
     * @memberof PageShop
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageShop
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageShop
     */
    'size'?: number;
    /**
     * 
     * @type {Array<Shop>}
     * @memberof PageShop
     */
    'content'?: Array<Shop>;
    /**
     * 
     * @type {number}
     * @memberof PageShop
     */
    'number'?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageShop
     */
    'sort'?: Sort;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageShop
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageShop
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageShop
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageShop
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageShop
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageShopProduct
 */
export interface PageShopProduct {
    /**
     * 
     * @type {number}
     * @memberof PageShopProduct
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageShopProduct
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageShopProduct
     */
    'size'?: number;
    /**
     * 
     * @type {Array<ShopProduct>}
     * @memberof PageShopProduct
     */
    'content'?: Array<ShopProduct>;
    /**
     * 
     * @type {number}
     * @memberof PageShopProduct
     */
    'number'?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageShopProduct
     */
    'sort'?: Sort;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageShopProduct
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageShopProduct
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageShopProduct
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageShopProduct
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageShopProduct
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    'sort'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageableObject
     */
    'sort'?: Sort;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface Shop
 */
export interface Shop {
    /**
     * 
     * @type {number}
     * @memberof Shop
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'shopAddress'?: string;
    /**
     * 
     * @type {Market}
     * @memberof Shop
     */
    'market'?: Market;
    /**
     * 
     * @type {BusinessCategory}
     * @memberof Shop
     */
    'category'?: BusinessCategory;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'handle'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'facebookUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'twitterUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'instagramUrl'?: string;
    /**
     * 
     * @type {number}
     * @memberof Shop
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'logo'?: string;
    /**
     * 
     * @type {number}
     * @memberof Shop
     */
    'productCount'?: number;
}
/**
 * 
 * @export
 * @interface ShopDto
 */
export interface ShopDto {
    /**
     * 
     * @type {string}
     * @memberof ShopDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopDto
     */
    'shopAddress'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShopDto
     */
    'marketId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShopDto
     */
    'businessCategoryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopDto
     */
    'handle'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopDto
     */
    'facebookUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopDto
     */
    'twitterUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopDto
     */
    'instagramUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopDto
     */
    'logo'?: string;
}
/**
 * 
 * @export
 * @interface ShopProduct
 */
export interface ShopProduct {
    /**
     * 
     * @type {number}
     * @memberof ShopProduct
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'productName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShopProduct
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShopProduct
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'description'?: string;
    /**
     * 
     * @type {Shop}
     * @memberof ShopProduct
     */
    'shop'?: Shop;
    /**
     * 
     * @type {Set<Image>}
     * @memberof ShopProduct
     */
    'images'?: Set<Image>;
    /**
     * 
     * @type {Set<Colour>}
     * @memberof ShopProduct
     */
    'colours'?: Set<Colour>;
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopProduct
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ShopProductDto
 */
export interface ShopProductDto {
    /**
     * 
     * @type {string}
     * @memberof ShopProductDto
     */
    'productName': string;
    /**
     * 
     * @type {number}
     * @memberof ShopProductDto
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof ShopProductDto
     */
    'productCategoryId': number;
    /**
     * 
     * @type {string}
     * @memberof ShopProductDto
     */
    'description': string;
    /**
     * 
     * @type {Set<string>}
     * @memberof ShopProductDto
     */
    'imageUrls'?: Set<string>;
    /**
     * 
     * @type {Set<ColourDto>}
     * @memberof ShopProductDto
     */
    'colours'?: Set<ColourDto>;
}
/**
 * 
 * @export
 * @interface Sort
 */
export interface Sort {
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    'empty'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    'sorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    'unsorted'?: boolean;
}
/**
 * 
 * @export
 * @interface State
 */
export interface State {
    /**
     * 
     * @type {number}
     * @memberof State
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof State
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UpdateShopDto
 */
export interface UpdateShopDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateShopDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateShopDto
     */
    'shopAddress'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateShopDto
     */
    'marketId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateShopDto
     */
    'businessCategoryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateShopDto
     */
    'facebookUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateShopDto
     */
    'twitterUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateShopDto
     */
    'instagramUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateShopDto
     */
    'logo'?: string;
}

/**
 * BusinessCategoryControllerApi - axios parameter creator
 * @export
 */
export const BusinessCategoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessCategoryControllerApi - functional programming interface
 * @export
 */
export const BusinessCategoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessCategoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessCategory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusinessCategoryControllerApi - factory interface
 * @export
 */
export const BusinessCategoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessCategoryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): AxiosPromise<Array<BusinessCategory>> {
            return localVarFp.getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(id: number, options?: any): AxiosPromise<BusinessCategory> {
            return localVarFp.getById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BusinessCategoryControllerApi - object-oriented interface
 * @export
 * @class BusinessCategoryControllerApi
 * @extends {BaseAPI}
 */
export class BusinessCategoryControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCategoryControllerApi
     */
    public getAll(options?: AxiosRequestConfig) {
        return BusinessCategoryControllerApiFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCategoryControllerApi
     */
    public getById(id: number, options?: AxiosRequestConfig) {
        return BusinessCategoryControllerApiFp(this.configuration).getById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MarketControllerApi - axios parameter creator
 * @export
 */
export const MarketControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarkets1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/markets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMarketById', 'id', id)
            const localVarPath = `/markets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketsByState: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMarketsByState', 'id', id)
            const localVarPath = `/markets/state/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketControllerApi - functional programming interface
 * @export
 */
export const MarketControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMarkets1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Market>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMarkets1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarketById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Market>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarketById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarketsByState(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Market>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarketsByState(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MarketControllerApi - factory interface
 * @export
 */
export const MarketControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarkets1(options?: any): AxiosPromise<Array<Market>> {
            return localVarFp.getAllMarkets1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketById(id: number, options?: any): AxiosPromise<Market> {
            return localVarFp.getMarketById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketsByState(id: number, options?: any): AxiosPromise<Array<Market>> {
            return localVarFp.getMarketsByState(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketControllerApi - object-oriented interface
 * @export
 * @class MarketControllerApi
 * @extends {BaseAPI}
 */
export class MarketControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketControllerApi
     */
    public getAllMarkets1(options?: AxiosRequestConfig) {
        return MarketControllerApiFp(this.configuration).getAllMarkets1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketControllerApi
     */
    public getMarketById(id: number, options?: AxiosRequestConfig) {
        return MarketControllerApiFp(this.configuration).getMarketById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketControllerApi
     */
    public getMarketsByState(id: number, options?: AxiosRequestConfig) {
        return MarketControllerApiFp(this.configuration).getMarketsByState(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShopAdminControllerApi - axios parameter creator
 * @export
 */
export const ShopAdminControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ShopDto} shopDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShop: async (shopDto: ShopDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopDto' is not null or undefined
            assertParamExists('createShop', 'shopDto', shopDto)
            const localVarPath = `/admin/shops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shopDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdminShops: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/shops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateShopDto} updateShopDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShop: async (id: number, updateShopDto: UpdateShopDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateShop', 'id', id)
            // verify required parameter 'updateShopDto' is not null or undefined
            assertParamExists('updateShop', 'updateShopDto', updateShopDto)
            const localVarPath = `/admin/shops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateShopDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopAdminControllerApi - functional programming interface
 * @export
 */
export const ShopAdminControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopAdminControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ShopDto} shopDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShop(shopDto: ShopDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShop(shopDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAdminShops(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Shop>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAdminShops(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateShopDto} updateShopDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShop(id: number, updateShopDto: UpdateShopDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShop(id, updateShopDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShopAdminControllerApi - factory interface
 * @export
 */
export const ShopAdminControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopAdminControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ShopDto} shopDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShop(shopDto: ShopDto, options?: any): AxiosPromise<Shop> {
            return localVarFp.createShop(shopDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdminShops(options?: any): AxiosPromise<Array<Shop>> {
            return localVarFp.getAllAdminShops(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateShopDto} updateShopDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShop(id: number, updateShopDto: UpdateShopDto, options?: any): AxiosPromise<Shop> {
            return localVarFp.updateShop(id, updateShopDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShopAdminControllerApi - object-oriented interface
 * @export
 * @class ShopAdminControllerApi
 * @extends {BaseAPI}
 */
export class ShopAdminControllerApi extends BaseAPI {
    /**
     * 
     * @param {ShopDto} shopDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopAdminControllerApi
     */
    public createShop(shopDto: ShopDto, options?: AxiosRequestConfig) {
        return ShopAdminControllerApiFp(this.configuration).createShop(shopDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopAdminControllerApi
     */
    public getAllAdminShops(options?: AxiosRequestConfig) {
        return ShopAdminControllerApiFp(this.configuration).getAllAdminShops(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateShopDto} updateShopDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopAdminControllerApi
     */
    public updateShop(id: number, updateShopDto: UpdateShopDto, options?: AxiosRequestConfig) {
        return ShopAdminControllerApiFp(this.configuration).updateShop(id, updateShopDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShopControllerApi - axios parameter creator
 * @export
 */
export const ShopControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Pageable} pageable 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStore: async (pageable: Pageable, start?: string, end?: string, category?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllStore', 'pageable', pageable)
            const localVarPath = `/shops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {number} marketId 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketStores: async (pageable: Pageable, marketId: number, start?: string, end?: string, category?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getMarketStores', 'pageable', pageable)
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('getMarketStores', 'marketId', marketId)
            const localVarPath = `/shops/market/{marketId}`
                .replace(`{${"marketId"}}`, encodeURIComponent(String(marketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} handle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreByHandle: async (handle: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'handle' is not null or undefined
            assertParamExists('getStoreByHandle', 'handle', handle)
            const localVarPath = `/shops/handle/{handle}`
                .replace(`{${"handle"}}`, encodeURIComponent(String(handle)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStoreById', 'id', id)
            const localVarPath = `/shops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopControllerApi - functional programming interface
 * @export
 */
export const ShopControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Pageable} pageable 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllStore(pageable: Pageable, start?: string, end?: string, category?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageShop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllStore(pageable, start, end, category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {number} marketId 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarketStores(pageable: Pageable, marketId: number, start?: string, end?: string, category?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageShop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarketStores(pageable, marketId, start, end, category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} handle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreByHandle(handle: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStoreByHandle(handle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStoreById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShopControllerApi - factory interface
 * @export
 */
export const ShopControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Pageable} pageable 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStore(pageable: Pageable, start?: string, end?: string, category?: string, options?: any): AxiosPromise<PageShop> {
            return localVarFp.getAllStore(pageable, start, end, category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {number} marketId 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketStores(pageable: Pageable, marketId: number, start?: string, end?: string, category?: string, options?: any): AxiosPromise<PageShop> {
            return localVarFp.getMarketStores(pageable, marketId, start, end, category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} handle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreByHandle(handle: string, options?: any): AxiosPromise<Shop> {
            return localVarFp.getStoreByHandle(handle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreById(id: number, options?: any): AxiosPromise<Shop> {
            return localVarFp.getStoreById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShopControllerApi - object-oriented interface
 * @export
 * @class ShopControllerApi
 * @extends {BaseAPI}
 */
export class ShopControllerApi extends BaseAPI {
    /**
     * 
     * @param {Pageable} pageable 
     * @param {string} [start] 
     * @param {string} [end] 
     * @param {string} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopControllerApi
     */
    public getAllStore(pageable: Pageable, start?: string, end?: string, category?: string, options?: AxiosRequestConfig) {
        return ShopControllerApiFp(this.configuration).getAllStore(pageable, start, end, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Pageable} pageable 
     * @param {number} marketId 
     * @param {string} [start] 
     * @param {string} [end] 
     * @param {string} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopControllerApi
     */
    public getMarketStores(pageable: Pageable, marketId: number, start?: string, end?: string, category?: string, options?: AxiosRequestConfig) {
        return ShopControllerApiFp(this.configuration).getMarketStores(pageable, marketId, start, end, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} handle 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopControllerApi
     */
    public getStoreByHandle(handle: string, options?: AxiosRequestConfig) {
        return ShopControllerApiFp(this.configuration).getStoreByHandle(handle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopControllerApi
     */
    public getStoreById(id: number, options?: AxiosRequestConfig) {
        return ShopControllerApiFp(this.configuration).getStoreById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShopProductAdminControllerApi - axios parameter creator
 * @export
 */
export const ShopProductAdminControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} shopId 
         * @param {ShopProductDto} shopProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (shopId: number, shopProductDto: ShopProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('createProduct', 'shopId', shopId)
            // verify required parameter 'shopProductDto' is not null or undefined
            assertParamExists('createProduct', 'shopProductDto', shopProductDto)
            const localVarPath = `/admin/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (shopId !== undefined && shopId !== null) {
                localVarHeaderParameter['shop-id'] = String(JSON.stringify(shopId));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shopProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductById: async (id: number, shopId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProductById', 'id', id)
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('deleteProductById', 'shopId', shopId)
            const localVarPath = `/admin/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (shopId !== undefined && shopId !== null) {
                localVarHeaderParameter['shop-id'] = String(JSON.stringify(shopId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} shopId 
         * @param {ShopProductDto} shopProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (id: number, shopId: number, shopProductDto: ShopProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProduct', 'id', id)
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('updateProduct', 'shopId', shopId)
            // verify required parameter 'shopProductDto' is not null or undefined
            assertParamExists('updateProduct', 'shopProductDto', shopProductDto)
            const localVarPath = `/admin/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (shopId !== undefined && shopId !== null) {
                localVarHeaderParameter['shop-id'] = String(JSON.stringify(shopId));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shopProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopProductAdminControllerApi - functional programming interface
 * @export
 */
export const ShopProductAdminControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopProductAdminControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} shopId 
         * @param {ShopProductDto} shopProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(shopId: number, shopProductDto: ShopProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(shopId, shopProductDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductById(id: number, shopId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductById(id, shopId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} shopId 
         * @param {ShopProductDto} shopProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(id: number, shopId: number, shopProductDto: ShopProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(id, shopId, shopProductDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShopProductAdminControllerApi - factory interface
 * @export
 */
export const ShopProductAdminControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopProductAdminControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} shopId 
         * @param {ShopProductDto} shopProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(shopId: number, shopProductDto: ShopProductDto, options?: any): AxiosPromise<ShopProduct> {
            return localVarFp.createProduct(shopId, shopProductDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductById(id: number, shopId: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteProductById(id, shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} shopId 
         * @param {ShopProductDto} shopProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(id: number, shopId: number, shopProductDto: ShopProductDto, options?: any): AxiosPromise<ShopProduct> {
            return localVarFp.updateProduct(id, shopId, shopProductDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShopProductAdminControllerApi - object-oriented interface
 * @export
 * @class ShopProductAdminControllerApi
 * @extends {BaseAPI}
 */
export class ShopProductAdminControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} shopId 
     * @param {ShopProductDto} shopProductDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopProductAdminControllerApi
     */
    public createProduct(shopId: number, shopProductDto: ShopProductDto, options?: AxiosRequestConfig) {
        return ShopProductAdminControllerApiFp(this.configuration).createProduct(shopId, shopProductDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} shopId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopProductAdminControllerApi
     */
    public deleteProductById(id: number, shopId: number, options?: AxiosRequestConfig) {
        return ShopProductAdminControllerApiFp(this.configuration).deleteProductById(id, shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} shopId 
     * @param {ShopProductDto} shopProductDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopProductAdminControllerApi
     */
    public updateProduct(id: number, shopId: number, shopProductDto: ShopProductDto, options?: AxiosRequestConfig) {
        return ShopProductAdminControllerApiFp(this.configuration).updateProduct(id, shopId, shopProductDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShopProductControllerApi - axios parameter creator
 * @export
 */
export const ShopProductControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Pageable} pageable 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [name] 
         * @param {string} [color] 
         * @param {string} [category] 
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts: async (pageable: Pageable, start?: string, end?: string, name?: string, color?: string, category?: string, price?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllProducts', 'pageable', pageable)
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (color !== undefined) {
                localVarQueryParameter['color'] = color;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (price !== undefined) {
                localVarQueryParameter['price'] = price;
            }

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductById', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} shopId 
         * @param {Pageable} pageable 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [name] 
         * @param {string} [color] 
         * @param {string} [category] 
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductByShopId: async (shopId: number, pageable: Pageable, start?: string, end?: string, name?: string, color?: string, category?: string, price?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('getProductByShopId', 'shopId', shopId)
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getProductByShopId', 'pageable', pageable)
            const localVarPath = `/products/shop/{shopId}`
                .replace(`{${"shopId"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (color !== undefined) {
                localVarQueryParameter['color'] = color;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (price !== undefined) {
                localVarQueryParameter['price'] = price;
            }

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopProductControllerApi - functional programming interface
 * @export
 */
export const ShopProductControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopProductControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Pageable} pageable 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [name] 
         * @param {string} [color] 
         * @param {string} [category] 
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProducts(pageable: Pageable, start?: string, end?: string, name?: string, color?: string, category?: string, price?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageShopProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProducts(pageable, start, end, name, color, category, price, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} shopId 
         * @param {Pageable} pageable 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [name] 
         * @param {string} [color] 
         * @param {string} [category] 
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductByShopId(shopId: number, pageable: Pageable, start?: string, end?: string, name?: string, color?: string, category?: string, price?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageShopProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductByShopId(shopId, pageable, start, end, name, color, category, price, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShopProductControllerApi - factory interface
 * @export
 */
export const ShopProductControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopProductControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Pageable} pageable 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [name] 
         * @param {string} [color] 
         * @param {string} [category] 
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts(pageable: Pageable, start?: string, end?: string, name?: string, color?: string, category?: string, price?: number, options?: any): AxiosPromise<PageShopProduct> {
            return localVarFp.getAllProducts(pageable, start, end, name, color, category, price, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(id: number, options?: any): AxiosPromise<ShopProduct> {
            return localVarFp.getProductById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} shopId 
         * @param {Pageable} pageable 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [name] 
         * @param {string} [color] 
         * @param {string} [category] 
         * @param {number} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductByShopId(shopId: number, pageable: Pageable, start?: string, end?: string, name?: string, color?: string, category?: string, price?: number, options?: any): AxiosPromise<PageShopProduct> {
            return localVarFp.getProductByShopId(shopId, pageable, start, end, name, color, category, price, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShopProductControllerApi - object-oriented interface
 * @export
 * @class ShopProductControllerApi
 * @extends {BaseAPI}
 */
export class ShopProductControllerApi extends BaseAPI {
    /**
     * 
     * @param {Pageable} pageable 
     * @param {string} [start] 
     * @param {string} [end] 
     * @param {string} [name] 
     * @param {string} [color] 
     * @param {string} [category] 
     * @param {number} [price] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopProductControllerApi
     */
    public getAllProducts(pageable: Pageable, start?: string, end?: string, name?: string, color?: string, category?: string, price?: number, options?: AxiosRequestConfig) {
        return ShopProductControllerApiFp(this.configuration).getAllProducts(pageable, start, end, name, color, category, price, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopProductControllerApi
     */
    public getProductById(id: number, options?: AxiosRequestConfig) {
        return ShopProductControllerApiFp(this.configuration).getProductById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} shopId 
     * @param {Pageable} pageable 
     * @param {string} [start] 
     * @param {string} [end] 
     * @param {string} [name] 
     * @param {string} [color] 
     * @param {string} [category] 
     * @param {number} [price] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopProductControllerApi
     */
    public getProductByShopId(shopId: number, pageable: Pageable, start?: string, end?: string, name?: string, color?: string, category?: string, price?: number, options?: AxiosRequestConfig) {
        return ShopProductControllerApiFp(this.configuration).getProductByShopId(shopId, pageable, start, end, name, color, category, price, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StateControllerApi - axios parameter creator
 * @export
 */
export const StateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarkets: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/states`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StateControllerApi - functional programming interface
 * @export
 */
export const StateControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StateControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMarkets(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<State>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMarkets(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StateControllerApi - factory interface
 * @export
 */
export const StateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StateControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarkets(options?: any): AxiosPromise<Array<State>> {
            return localVarFp.getAllMarkets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StateControllerApi - object-oriented interface
 * @export
 * @class StateControllerApi
 * @extends {BaseAPI}
 */
export class StateControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateControllerApi
     */
    public getAllMarkets(options?: AxiosRequestConfig) {
        return StateControllerApiFp(this.configuration).getAllMarkets(options).then((request) => request(this.axios, this.basePath));
    }
}


