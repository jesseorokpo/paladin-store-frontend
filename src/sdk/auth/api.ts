/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Authority
 */
export interface Authority {
    /**
     * 
     * @type {number}
     * @memberof Authority
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    'name': AuthorityNameEnum;
    /**
     * 
     * @type {Array<User>}
     * @memberof Authority
     */
    'users'?: Array<User>;
}

export const AuthorityNameEnum = {
    User: 'ROLE_USER',
    MarketSeller: 'ROLE_MARKET_SELLER',
    Admin: 'ROLE_ADMIN',
    BrandSeller: 'ROLE_BRAND_SELLER',
    SuperAdmin: 'ROLE_SUPER_ADMIN'
} as const;

export type AuthorityNameEnum = typeof AuthorityNameEnum[keyof typeof AuthorityNameEnum];

/**
 * 
 * @export
 * @interface BaseRequest
 */
export interface BaseRequest {
    /**
     * 
     * @type {string}
     * @memberof BaseRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginRequest
     */
    'rememberMe'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'platform': LoginRequestPlatformEnum;
}

export const LoginRequestPlatformEnum = {
    BrandSeller: 'BRAND_SELLER',
    MarketSeller: 'MARKET_SELLER',
    Buyer: 'BUYER',
    Admin: 'ADMIN'
} as const;

export type LoginRequestPlatformEnum = typeof LoginRequestPlatformEnum[keyof typeof LoginRequestPlatformEnum];

/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {User}
     * @memberof LoginResponse
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface RegistrationRequest
 */
export interface RegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'platform': RegistrationRequestPlatformEnum;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'gender'?: RegistrationRequestGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'countryCode'?: string;
}

export const RegistrationRequestPlatformEnum = {
    BrandSeller: 'BRAND_SELLER',
    MarketSeller: 'MARKET_SELLER',
    Buyer: 'BUYER',
    Admin: 'ADMIN'
} as const;

export type RegistrationRequestPlatformEnum = typeof RegistrationRequestPlatformEnum[keyof typeof RegistrationRequestPlatformEnum];
export const RegistrationRequestGenderEnum = {
    Female: 'FEMALE',
    Male: 'MALE'
} as const;

export type RegistrationRequestGenderEnum = typeof RegistrationRequestGenderEnum[keyof typeof RegistrationRequestGenderEnum];

/**
 * 
 * @export
 * @interface RegistrationResponse
 */
export interface RegistrationResponse {
    /**
     * 
     * @type {boolean}
     * @memberof RegistrationResponse
     */
    'emailVerified'?: boolean;
}
/**
 * 
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'otp': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface SocialRequest
 */
export interface SocialRequest {
    /**
     * 
     * @type {string}
     * @memberof SocialRequest
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof SocialRequest
     */
    'platform': SocialRequestPlatformEnum;
}

export const SocialRequestPlatformEnum = {
    BrandSeller: 'BRAND_SELLER',
    MarketSeller: 'MARKET_SELLER',
    Buyer: 'BUYER',
    Admin: 'ADMIN'
} as const;

export type SocialRequestPlatformEnum = typeof SocialRequestPlatformEnum[keyof typeof SocialRequestPlatformEnum];

/**
 * 
 * @export
 * @interface UpdatePasswordRequest
 */
export interface UpdatePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordRequest
     */
    'oldPassword': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordRequest
     */
    'newPassword': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordRequest
     */
    'confirmPassword': string;
}
/**
 * 
 * @export
 * @interface UpdateProfileRequest
 */
export interface UpdateProfileRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileRequest
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileRequest
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileRequest
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileRequest
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileRequest
     */
    'gender'?: UpdateProfileRequestGenderEnum;
}

export const UpdateProfileRequestGenderEnum = {
    Female: 'FEMALE',
    Male: 'MALE'
} as const;

export type UpdateProfileRequestGenderEnum = typeof UpdateProfileRequestGenderEnum[keyof typeof UpdateProfileRequestGenderEnum];

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'gender'?: UserGenderEnum;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'activated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastLoginDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastPasswordResetDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Set<Authority>}
     * @memberof User
     */
    'authorities'?: Set<Authority>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'fullName'?: string;
}

export const UserGenderEnum = {
    Female: 'FEMALE',
    Male: 'MALE'
} as const;

export type UserGenderEnum = typeof UserGenderEnum[keyof typeof UserGenderEnum];


/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeResetPassword: async (resetPasswordRequest: ResetPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordRequest' is not null or undefined
            assertParamExists('completeResetPassword', 'resetPasswordRequest', resetPasswordRequest)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginFacebook: async (socialRequest: SocialRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'socialRequest' is not null or undefined
            assertParamExists('loginFacebook', 'socialRequest', socialRequest)
            const localVarPath = `/auth/login/facebook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(socialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGoogle: async (socialRequest: SocialRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'socialRequest' is not null or undefined
            assertParamExists('loginGoogle', 'socialRequest', socialRequest)
            const localVarPath = `/auth/login/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(socialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BaseRequest} baseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendCode: async (baseRequest: BaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseRequest' is not null or undefined
            assertParamExists('resendCode', 'baseRequest', baseRequest)
            const localVarPath = `/auth/resend-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BaseRequest} baseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (baseRequest: BaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseRequest' is not null or undefined
            assertParamExists('resetPassword', 'baseRequest', baseRequest)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} otp 
         * @param {BaseRequest} baseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userActivation: async (otp: string, baseRequest: BaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'otp' is not null or undefined
            assertParamExists('userActivation', 'otp', otp)
            // verify required parameter 'baseRequest' is not null or undefined
            assertParamExists('userActivation', 'baseRequest', baseRequest)
            const localVarPath = `/auth/activate/{otp}`
                .replace(`{${"otp"}}`, encodeURIComponent(String(otp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegistrationRequest} registrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegistration: async (registrationRequest: RegistrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationRequest' is not null or undefined
            assertParamExists('userRegistration', 'registrationRequest', registrationRequest)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegistrationWithFacebook: async (socialRequest: SocialRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'socialRequest' is not null or undefined
            assertParamExists('userRegistrationWithFacebook', 'socialRequest', socialRequest)
            const localVarPath = `/auth/register/facebook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(socialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegistrationWithGoogle: async (socialRequest: SocialRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'socialRequest' is not null or undefined
            assertParamExists('userRegistrationWithGoogle', 'socialRequest', socialRequest)
            const localVarPath = `/auth/register/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(socialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeResetPassword(resetPasswordRequest: ResetPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeResetPassword(resetPasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginFacebook(socialRequest: SocialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginFacebook(socialRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginGoogle(socialRequest: SocialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginGoogle(socialRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BaseRequest} baseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendCode(baseRequest: BaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendCode(baseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BaseRequest} baseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(baseRequest: BaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(baseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} otp 
         * @param {BaseRequest} baseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userActivation(otp: string, baseRequest: BaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userActivation(otp, baseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegistrationRequest} registrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegistration(registrationRequest: RegistrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRegistration(registrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegistrationWithFacebook(socialRequest: SocialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRegistrationWithFacebook(socialRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegistrationWithGoogle(socialRequest: SocialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRegistrationWithGoogle(socialRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeResetPassword(resetPasswordRequest: ResetPasswordRequest, options?: any): AxiosPromise<object> {
            return localVarFp.completeResetPassword(resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginFacebook(socialRequest: SocialRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.loginFacebook(socialRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGoogle(socialRequest: SocialRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.loginGoogle(socialRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BaseRequest} baseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendCode(baseRequest: BaseRequest, options?: any): AxiosPromise<object> {
            return localVarFp.resendCode(baseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BaseRequest} baseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(baseRequest: BaseRequest, options?: any): AxiosPromise<object> {
            return localVarFp.resetPassword(baseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} otp 
         * @param {BaseRequest} baseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userActivation(otp: string, baseRequest: BaseRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.userActivation(otp, baseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegistrationRequest} registrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegistration(registrationRequest: RegistrationRequest, options?: any): AxiosPromise<RegistrationResponse> {
            return localVarFp.userRegistration(registrationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegistrationWithFacebook(socialRequest: SocialRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.userRegistrationWithFacebook(socialRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocialRequest} socialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegistrationWithGoogle(socialRequest: SocialRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.userRegistrationWithGoogle(socialRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {ResetPasswordRequest} resetPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public completeResetPassword(resetPasswordRequest: ResetPasswordRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).completeResetPassword(resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(loginRequest: LoginRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocialRequest} socialRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public loginFacebook(socialRequest: SocialRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).loginFacebook(socialRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocialRequest} socialRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public loginGoogle(socialRequest: SocialRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).loginGoogle(socialRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BaseRequest} baseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public resendCode(baseRequest: BaseRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).resendCode(baseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BaseRequest} baseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public resetPassword(baseRequest: BaseRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).resetPassword(baseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} otp 
     * @param {BaseRequest} baseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public userActivation(otp: string, baseRequest: BaseRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).userActivation(otp, baseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegistrationRequest} registrationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public userRegistration(registrationRequest: RegistrationRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).userRegistration(registrationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocialRequest} socialRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public userRegistrationWithFacebook(socialRequest: SocialRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).userRegistrationWithFacebook(socialRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocialRequest} socialRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public userRegistrationWithGoogle(socialRequest: SocialRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).userRegistrationWithGoogle(socialRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdatePasswordRequest} updatePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword: async (updatePasswordRequest: UpdatePasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePasswordRequest' is not null or undefined
            assertParamExists('updatePassword', 'updatePasswordRequest', updatePasswordRequest)
            const localVarPath = `/user/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileRequest} updateProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (updateProfileRequest: UpdateProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProfileRequest' is not null or undefined
            assertParamExists('updateUser', 'updateProfileRequest', updateProfileRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdatePasswordRequest} updatePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(updatePasswordRequest: UpdatePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePassword(updatePasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateProfileRequest} updateProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(updateProfileRequest: UpdateProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(updateProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: any): AxiosPromise<User> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdatePasswordRequest} updatePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword(updatePasswordRequest: UpdatePasswordRequest, options?: any): AxiosPromise<User> {
            return localVarFp.updatePassword(updatePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProfileRequest} updateProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(updateProfileRequest: UpdateProfileRequest, options?: any): AxiosPromise<User> {
            return localVarFp.updateUser(updateProfileRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUser(options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdatePasswordRequest} updatePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updatePassword(updatePasswordRequest: UpdatePasswordRequest, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updatePassword(updatePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProfileRequest} updateProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUser(updateProfileRequest: UpdateProfileRequest, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updateUser(updateProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


